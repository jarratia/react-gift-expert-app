{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GiftExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAmBrC,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,kDACqCC,UAAUH,GAD/C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCcLO,EAZK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIzB,OACI,sBAAKc,UAAU,yCAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCkBjBO,EAvBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDb0BK,CAAa1B,GAAjCa,EAFe,EAEpBN,KAAaa,EAFO,EAEPA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAO,SAAAC,GAAG,OACb,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEWtBgB,EAzBO,WAAO,IAAD,EAEYzC,mBAAS,CAAC,cAFtB,mBAEjB0C,EAFiB,KAEL3C,EAFK,KAIxB,OACI,qCACI,oBAAI+B,UAAU,aAAd,6BAEA,cAAC,EAAD,CACI/B,cAAeA,IAGnB,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CACIA,SAAWA,GACNA,Y,MChBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f8f70691.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        //Validate submit\n        if ( inputValue.trim().length > 2 ){\n            setCategories(cats => [inputValue, ...cats ]);\n            setInputValue('');\n        }\n\n        //console.log('form sended')\n    }\n    return (        \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                value={inputValue}\n                onChange={handleInputChange}/>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async (category) => {\n    const url = ` https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=vjtf6dKvxXdUGxYOacM0UXF9a9Zd7rst`\n    const response = await fetch(url)\n    const {data} = await response.json()\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    //console.log(gifs)\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n\n    //console.log(img)\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <p>{title}</p>\n            <img src={url} alt={title} />\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__FadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n    \n            <div className=\"card-grid\">        \n                {\n                    images.map( ( img => \n                        <GifGridItem \n                            key={img.id} \n                            {...img} />\n                    ))\n                }\n            </div> \n        </>\n    )\n}\n\nexport default GifGrid\n","import React, {useState, useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n        getGifs(category)\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })     \n            })\n    }, [category])\n\n    return state;\n}\n\n","import React, {useState} from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GiftExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2 className=\"title-site\">Gift Expert App</h2>\n\n            <AddCategory \n                setCategories={setCategories}\n            />\n\n            <ol>\n                {\n                    categories.map( (category) => \n                        <GifGrid \n                            category={ category } \n                            key={category}/>\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GiftExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}